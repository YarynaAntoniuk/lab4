openapi: 3.0.0
info:
  title: InternetShop API
  description: In this Internet-Shop you can buy goods.
  version: 1.0.0
  
servers:
  - description: Main Internet-Shop server
    url: "http://InternetShop.Antoniuk.com"
tags:
- name: user
  description: All about user
- name: Production
  description: All information about the goods
- name: InternetShop
  description: All about buying production

paths:
  /Production:
    post:
      tags:
      - Production
      summary: Add a thing to the Internet-Shop
      operationId: addOne
      requestBody:
        description: A unit of production to be added to the InternetShop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Production'
          application/xml:
            schema:
              $ref: '#/components/schemas/Production'
        required: true
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid product
          content: {}
  /Production/{productionId}:
    get:
      tags:
      - Production
      summary: Find certain unit of production 
      description: Returns one of production
      operationId: getOneById
      parameters:
      - name: productionId
        in: path
        description: ID of product that needs
        required: true
        schema:
          type: integer
          example: 3
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Production'
            application/json:
              schema:
                $ref: '#/components/schemas/Production'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Production not found
          content: {}
    put:
      tags:
      - Production
      summary: Updates a production
      operationId: updateProduction
      parameters:
      - name: productionId
        in: path
        description: An ID of unit of production to be updated
        required: true
        schema:
          type: integer
          format: int64
          example: 3
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Invalid production
          content: {}
    delete:
      tags:
      - Production
      summary: Deletes a unit of production
      operationId: deleteProduction
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: productionId
        in: path
        description: Delete ID
        required: true
        schema:
          type: integer
          example: 3
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: A certain unit of production not found
          content: {}
  /InternetShop:
    post:
      tags:
      - InternetShop
      summary: Place a custom
      operationId: placeCustom
      requestBody:
        description: custom placed for purchasing
        content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Custom'
            application/json:
              schema:
                $ref: '#/components/schemas/Custom'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Custom'
            application/json:
              schema:
                $ref: '#/components/schemas/Custom'
        '400':
          description: Invalid Custom
          content: {}

  /InternetShop/customs:
    get:
        tags:
        - InternetShop
        summary: Returns a list of selected production
        operationId: getCustoms
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Customs'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Customs'
          '400':
            description: Invalid Custom
            content: {}
        security:
        - api_key: []
  /InternetShop/{customId}:
    get:
      tags:
      - InternetShop
      summary: Find custom by ID
      description: Enter integer ID with value >= 1.
      operationId: getCustomById
      parameters:
      - name: customId
        in: path
        description: ID of custom to be fetched
        required: true
        schema:
          minimum: 1.0
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Custom'
            application/json:
              schema:
                $ref: '#/components/schemas/Custom'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Custom not found
          content: {}
    put:
          tags:
          - InternetShop
          summary: Update custom by ID
          description: This can only be done by the logged in user.
          operationId: updateCustom
          parameters:
          - name: customId
            in: path
            description: ID of custom to be fetched
            required: true
            schema:
              type: string
          requestBody:
            description: Updated user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Custom'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Custom'
            required: true
          responses:
            '200':
              description: successful operation
            '400':
              description: Invalid ID supplied
              content: {}
            '404':
              description: Custom not found
              content: {}
          security:
          - store_auth:
            - write:customs
    delete:
      tags:
      - InternetShop
      summary: Delete custom by ID
      description: For valid response enter ID with positive integer value.
      operationId: deleteCustom
      parameters:
      - name: customId
        in: path
        description: ID of the custom to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Custom not found
          content: {}
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: bad request
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: userName
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
          content: {}
  /user/{userName}:
    get:
      tags:
      - user
      summary: Get user by name
      operationId: getUserByName
      parameters:
      - name: userName
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
      security:
        - store_auth:
          - read:users
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: userName
        in: path
        description: he name to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      security:
        - store_auth:
          - admin
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: userName
        in: path
        description: The name to be deleted
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
      security:
        - store_auth:
          - admin
components:
  schemas:
    Custom:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        production:
          $ref: '#/components/schemas/Production'
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Custom Status
          enum:
          - placed
          - confirmed
          - delivered
        packed:
          type: boolean
          default: false
      xml:
        name: Custom
    Customs:
      properties:
        customs:
          type: array
          items:
            $ref: '#/components/schemas/Custom'
          uniqueItems: true
    User:
      type: object
      properties:
        Id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: user
    Production:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: phone
        number:
          minimum: 1.0
          type: integer
          format: int64
          example: 5
        status:
          type: string
          description: Status of production
          enum:
          - available
          - reserved
          - sold
      xml:
        name: Production
  securitySchemes:
    store_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://api.store.com/oauth/dialog"
          scopes:
            write:products: modify products in your account
            read:products: read your products
            read:customs: read customs
            read:users: read users
            write:customs: write customs
            admin: admin priviledges
    api_key:
      type: apiKey
      name: api_key
      in: header